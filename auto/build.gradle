plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}

project.ext.set("releasePath", "D:/Daten/Michel/OneDrive/Projekte/Release")

android {
    namespace 'de.michelinside.glucodataauto'
    compileSdk rootProject.compileSdk

    defaultConfig {
        applicationId "de.michelinside.glucodataauto"
        minSdk rootProject.minSdk
        targetSdk rootProject.targetSdk
        versionCode 1029
        versionName "1.3"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            // Enable ProGuard
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            resValue "string", "app_name", "GlucoDataAuto"
        }
        dev_release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-dev-rules.pro'
            versionNameSuffix '-dev'
            resValue "string", "app_name", "GlucoDataAuto"
            signingConfig signingConfigs.debug
        }
        debug {
            minifyEnabled false
            resValue "string", "app_name", "GlucoDataAuto Debug"
        }
        second {
            applicationIdSuffix '.second'
            versionNameSuffix '_SECOND'
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            resValue "string", "app_name", "GDA Second"
            signingConfig signingConfigs.debug
        }
        applicationVariants.all {
                // this method is use to rename your all apk weather
                // it may be signed or unsigned(debug apk)
            variant ->
                variant.outputs.each {
                        // on below line we are setting a
                        // name to our apk as GlucoDataAuto.apk
                    output ->
                        def name = "GlucoDataAuto_" + versionName + ".apk"
                        // on below line we are setting the
                        // outputFile Name to our apk file.
                        output.outputFileName = name
                }
        }

    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        viewBinding true
    }
    dependenciesInfo {
        // Disables dependency metadata when building APKs.
        includeInApk = false
        // Disables dependency metadata when building Android App Bundles.
        includeInBundle = false
    }
}

dependencies {
    implementation 'androidx.core:core-ktx:1.13.1'
    implementation 'androidx.appcompat:appcompat:1.7.0'
    implementation 'com.google.android.material:material:1.12.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.2.0'
    implementation 'com.joaomgcd:taskerpluginlibrary:0.4.10'
    implementation project(path: ':common')
    implementation "androidx.car.app:app:1.4.0"
    implementation "androidx.preference:preference-ktx:1.2.1"
    implementation "com.jaredrummler:colorpicker:1.1.0"
    implementation "androidx.media:media:1.7.0"
    implementation 'androidx.work:work-runtime:2.9.1'
}

afterEvaluate {
    //noinspection ConfigurationAvoidance
    def assembleRelease = tasks.getByPath(':auto:assembleRelease')
    def copyAndroidApksPostBuild = tasks.register('copyAndroidApksPostBuild', Copy) {
        dependsOn assembleRelease
        from "${projectDir}/release"
        include '**/*.apk'
        into rootProject.releasePath
    }
    assembleRelease.finalizedBy(copyAndroidApksPostBuild)

    //noinspection ConfigurationAvoidance
    def assembleDevRelease = tasks.getByPath(':auto:assembleDev_release')
    def copyAndroidDevApksPostBuild = tasks.register('copyAndroidDevApksPostBuild', Copy) {
        dependsOn assembleDevRelease
        from "${projectDir}/dev_release"
        include '**/*.apk'
        into rootProject.releasePath
    }
    assembleDevRelease.finalizedBy(copyAndroidDevApksPostBuild)

    //noinspection ConfigurationAvoidance
    def assembleSecond = tasks.getByPath(':auto:assembleSecond')
    def copyAndroidSecondApksPostBuild = tasks.register('copyAndroidSecondApksPostBuild', Copy) {
        dependsOn assembleSecond
        from "${projectDir}/second"
        include '**/*.apk'
        into rootProject.releasePath
    }
    assembleSecond.finalizedBy(copyAndroidSecondApksPostBuild)
}
