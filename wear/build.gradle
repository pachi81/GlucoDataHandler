plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}

android {
    namespace 'de.michelinside.glucodatahandler'
    compileSdk rootProject.compileSdk

    defaultConfig {
        applicationId "de.michelinside.glucodatahandler"
        minSdk rootProject.minSdk
        targetSdk rootProject.targetSdk
        versionCode 2000 + rootProject.versionCode
        versionName rootProject.versionName
    }

    buildTypes {
        release {
            // Enable ProGuard
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            resValue "string", "app_name", "GlucoDataHandler"
        }
        dev_release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-dev-rules.pro'
            versionNameSuffix '-dev'
            resValue "string", "app_name", "GlucoDataHandler"
        }
        debug {
            resValue "string", "app_name", "GlucoDataHandler"
        }
        second {
            applicationIdSuffix '.second'
            versionNameSuffix '_SECOND'
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            resValue "string", "app_name", "GDH Second"
        }
        applicationVariants.all {
                // this method is use to rename your all apk weather
                // it may be signed or unsigned(debug apk)
            variant ->
                variant.outputs.each {
                        // on below line we are setting a
                        // name to our apk as GlucoDataHandler.apk
                    output ->
                        def name = "GlucoDataHandler_Wear_" + versionName + ".apk"
                        // on below line we are setting the
                        // outputFile Name to our apk file.
                        output.outputFileName = name
                }
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        viewBinding true
        //compose true
    }
    /*
    composeOptions {
        kotlinCompilerExtensionVersion = "1.5.11"
    }*/
    dependenciesInfo {
        // Disables dependency metadata when building APKs.
        includeInApk = false
        // Disables dependency metadata when building Android App Bundles.
        includeInBundle = false
    }
}

dependencies {
/*
    def composeBom = platform('androidx.compose:compose-bom:2024.04.00')
    implementation composeBom
    androidTestImplementation composeBom
    implementation "androidx.compose.runtime:runtime:1.6.5"

    // Material Design 3
    implementation 'androidx.compose.material3:material3'
    // Android Studio Preview support
    implementation 'androidx.compose.ui:ui-tooling-preview'
    debugImplementation 'androidx.compose.ui:ui-tooling'
 */
    implementation 'androidx.core:core-ktx:1.13.1'
    implementation 'com.google.android.gms:play-services-wearable:19.0.0'
    implementation 'androidx.percentlayout:percentlayout:1.0.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.3.2'
    implementation 'androidx.wear:wear:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.2.0'
    implementation project(path: ':common')
    implementation 'androidx.wear.watchface:watchface-complications-data-source-ktx:1.2.1'
    implementation 'androidx.wear.watchface:watchface-complications-rendering:1.2.1'
    implementation 'androidx.appcompat:appcompat-resources:1.7.0'
    implementation 'com.google.android.material:material:1.12.0'
    implementation 'androidx.appcompat:appcompat:1.7.0'
    implementation 'androidx.work:work-runtime:2.9.1'
    implementation "androidx.core:core-splashscreen:1.1.0-rc01"
}

afterEvaluate {
    //noinspection ConfigurationAvoidance
    def bundleRelease = tasks.getByPath(':wear:bundleRelease')
    def copyAndroidBundlePostBuild = tasks.register('copyAndroidBundlePostBuild', Copy) {
        dependsOn bundleRelease
        from "${projectDir}/release"
        include '**/*.aab'
        into rootProject.releasePath + "/Playstore" + "/" + versionCode.toString()
    }
    bundleRelease.finalizedBy(copyAndroidBundlePostBuild)

    //noinspection ConfigurationAvoidance
    def bundleDev_release = tasks.getByPath(':wear:bundleDev_release')
    def copyAndroidBundleDevPostBuild = tasks.register('copyAndroidBundleDevPostBuild', Copy) {
        dependsOn bundleDev_release
        from "${projectDir}/dev_release"
        include '**/*.aab'
        into rootProject.releasePath + "/Playstore" + "/" + versionCode.toString()
    }
    bundleDev_release.finalizedBy(copyAndroidBundleDevPostBuild)

    //noinspection ConfigurationAvoidance
    def assembleRelease = tasks.getByPath(':wear:assembleRelease')
    def copyAndroidApksPostBuild = tasks.register('copyAndroidApksPostBuild', Copy) {
        dependsOn assembleRelease
        from "${projectDir}/release"
        include '**/*.apk'
        into rootProject.releasePath
    }
    assembleRelease.finalizedBy(copyAndroidApksPostBuild)

    //noinspection ConfigurationAvoidance
    def assembleDevRelease = tasks.getByPath(':wear:assembleDev_release')
    def copyAndroidDevApksPostBuild = tasks.register('copyAndroidDevApksPostBuild', Copy) {
        dependsOn assembleDevRelease
        from "${projectDir}/dev_release"
        include '**/*.apk'
        into rootProject.releasePath
    }
    assembleDevRelease.finalizedBy(copyAndroidDevApksPostBuild)

    //noinspection ConfigurationAvoidance
    def assembleSecond = tasks.getByPath(':wear:assembleSecond')
    def copyAndroidSecondApksPostBuild = tasks.register('copyAndroidSecondApksPostBuild', Copy) {
        dependsOn assembleSecond
        from "${projectDir}/second"
        include '**/*.apk'
        into rootProject.releasePath
    }
    assembleSecond.finalizedBy(copyAndroidSecondApksPostBuild)
}